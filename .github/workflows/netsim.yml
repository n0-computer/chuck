name: netsim-CI

on:
  pull_request:
  push:
    branches:
      - main
  issue_comment:
    types: [created, edited, deleted]

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings
  MSRV: "1.63"

jobs:
  netsim:
    name: Run network simulations/benchmarks
    if: >-
      (github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
          github.event.comment.body == '/perf') || github.event_name != 'issue_comment'
    runs-on: [self-hosted, linux, X64]
    permissions:
      issues: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive
    
    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    # - name: Install Protoc
    #   run: |
    #     PROTOC_VERSION=3.20.1
    #     PROTOC_ARCH=linux-x86_64
    #     PROTOC_ZIP=protoc-$PROTOC_VERSION-$PROTOC_ARCH.zip
    #     curl --retry 3 --retry-max-time 90 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
    #     sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
    #     sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
    #     rm -f $PROTOC_ZIP
    #     echo "PROTOC=/usr/local/bin/protoc" >> $GITHUB_ENV
    #     echo "PROTOC_INCLUDE=/usr/local/include" >> $GITHUB_ENV
      
    - name: Install netsim deps
      run: |
        cd netsim
        sudo apt update
        ./setup.sh

    - name: Build chuck
      run: |
        cargo build --release

    - name: Fetch and build sendme
      run: |
        git clone https://github.com/n0-computer/sendme.git
        cd sendme
        cargo build --release

    - name: Setup binary paths
      run: |
        echo "$(pwd)/target/release" >> $GITHUB_PATH
        echo "$(pwd)/sendme/target/release" >> $GITHUB_PATH

    - name: Run tests
      run: |
        cd netsim
        sudo kill -9 $(pgrep ovs)
        sudo mn --clean
        sudo python3 main.py sims/standard/sendme_test.json

    - name: Generate report
      id: generate_report
      run: |
        cd netsim
        python3 reports_csv.py > report.txt
        export NETSIM_REPORT=$(cat report.txt)
        echo "NETSIM_REPORT<<EOFMARKER" >> ${GITHUB_OUTPUT}
        echo "${NETSIM_REPORT}" >> ${GITHUB_OUTPUT}
        echo "EOFMARKER" >> ${GITHUB_OUTPUT}

    - name: Configure vars
      id: config_vars
      run: |
        git_hash=$(git rev-parse --short "${{ github.sha }}")
        echo "REPORT_REF=${git_hash}" >> ${GITHUB_OUTPUT}

    - name: Say Hi Issue
      uses: peter-evans/create-or-update-comment@v2
      if: github.event_name == 'issue_comment'
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          body: |
          `${{ github.head_ref }}.${{ steps.config_vars.outputs.REPORT_REF }}`
          <details>
          <summary>Perf report</summary>
          
          ```json

            ${{ steps.generate_report.outputs.NETSIM_REPORT }}

          ```
          </details>

    - name: Say Hi PR
      uses: peter-evans/create-or-update-comment@v2
      if: github.event.pull_request
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          `${{ github.head_ref }}.${{ steps.config_vars.outputs.REPORT_REF }}`
          <details>
          <summary>Perf report</summary>
          
          ```json

            ${{ steps.generate_report.outputs.NETSIM_REPORT }}

          ```
          </details>

    - name: Dump report
      run: |
        export AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}"
        export AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}"
        export AWS_DEFAULT_REGION=us-west-2
        
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

        cd netsim
        python3 reports_csv.py --prom
